
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function isUserRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Users can read their own profile, and SPTs/JPTs can read profiles of those below them.
    match /users/{userId} {
      allow read: if isSignedIn() && (
        request.auth.uid == userId ||
        isUserRole('SPT') ||
        (isUserRole('JPT') && get(/databases/$(database)/documents/users/$(userId)).data.role == 'Associate')
      );
      
      allow create: if isSignedIn() && request.auth.uid == userId;

      // A user can only update their own notificationTokens array.
      allow update: if isSignedIn() && 
                       request.auth.uid == userId && 
                       request.resource.data.keys().hasOnly(['notificationTokens']);
    }

    // Task rules
    match /tasks/{taskId} {
      allow read: if isSignedIn(); // All signed-in users can read tasks to see details.
      
      allow create: if isSignedIn() && (isUserRole('SPT') || isUserRole('JPT'));
      
      // Complex update logic:
      // - SPTs can update anything.
      // - JPTs can update tasks they created.
      // - Associates can only update the assignedTo array (to accept a task) or status (to complete it).
      allow update: if isSignedIn() && (
        isUserRole('SPT') ||
        (isUserRole('JPT') && resource.data.createdBy == request.auth.uid) ||
        (
          resource.data.assignedTo.hasAny([request.auth.uid]) && // Must be assigned to the task
          (
            request.resource.data.keys().hasAny(['assignedTo', 'status', 'messages', 'documents', 'completedAt'])
          )
        )
      );

      allow delete: if isSignedIn() && (isUserRole('SPT') || (isUserRole('JPT') && resource.data.createdBy == request.auth.uid));
      
      match /messages/{messageId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && (
          get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedTo.hasAny([request.auth.uid]) ||
          get(/databases/$(database)/documents/tasks/$(taskId)).data.createdBy == request.auth.uid ||
          isUserRole('SPT') || isUserRole('JPT')
        );
      }
    }
    
    // Announcement Rules
    match /announcements/{announcementId} {
       allow read: if isSignedIn() && 
                      (resource.data.audience == 'all' || 
                      (resource.data.audience == 'jpt-only' && (isUserRole('JPT') || isUserRole('SPT'))));
       
       allow create, update, delete: if isSignedIn() && (isUserRole('SPT') || isUserRole('JPT'));
    }
  }
}
